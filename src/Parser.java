/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.*;

/** ID lister. */
public class Parser implements ParserConstants {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
        try {
        exp = parser.Start();
        System.out.println( exp.eval(new Environment(null)) );
        } catch (Exception e) {
          System.out.println ("Syntax Error!");
          parser.ReInit(System.in);
        }
    }
  }

  static final public ASTNode Start() throws ParseException {
  ASTNode t;
    t = S();
    jj_consume_token(END);
    jj_consume_token(EL);
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode S() throws ParseException {
    ASTNode t1, t2;
    t1 = SE();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEMICOLON);
      t2 = SE();
                                        t1 = new ASTSeq(t1, t2);
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SE() throws ParseException {
    ASTNode t1, t2;
    t1 = boolAdd();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(ASSIGN);
      t2 = boolAdd();
                                               t1 = new ASTAssign(t1, t2);
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode boolAdd() throws ParseException {
  ASTNode t1, t2;
    t1 = boolMult();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      t2 = boolMult();
                             t1 = new ASTOr(t1, t2);
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode boolMult() throws ParseException {
  ASTNode t1, t2;
    t1 = relops();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      t2 = relops();
                            t1 = new ASTAnd(t1, t2);
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode relops() throws ParseException {
    ASTNode t1, t2;
    Token op;
    t1 = Exp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALTO:
    case GREATERTHAN:
    case GREATEREQTHAN:
    case LESSTHAN:
    case LESSEQTHAN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALTO:
        op = jj_consume_token(EQUALTO);
        break;
      case GREATERTHAN:
        op = jj_consume_token(GREATERTHAN);
        break;
      case GREATEREQTHAN:
        op = jj_consume_token(GREATEREQTHAN);
        break;
      case LESSTHAN:
        op = jj_consume_token(LESSTHAN);
        break;
      case LESSEQTHAN:
        op = jj_consume_token(LESSEQTHAN);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Exp();
          t1 = new ASTCompare(t1, t2, op.image);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Exp() throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
                   if (op.kind == PLUS)
                    t1 = new ASTPlus(t1,t2);
                   else {
                    t1 = new ASTSub(t1,t2);}
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Term() throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = Fact();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
    case DIV:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        op = jj_consume_token(TIMES);
        break;
      case DIV:
        op = jj_consume_token(DIV);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
      if (op.kind == TIMES)
        t1= new ASTMult(t1,t2);
      else
        t1 = new ASTDiv(t1,t2);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fact() throws ParseException {
  Token n;
  ASTNode t1, t2;
  List<Bind> variables = new ArrayList<Bind>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      n = jj_consume_token(Num);
                t1 = new ASTNum(Integer.parseInt(n.image));
      break;
    case Id:
      n = jj_consume_token(Id);
                   t1 = new ASTId(n.image);
      break;
    case TRUE:
      jj_consume_token(TRUE);
                 t1 = new ASTBool(true);
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  t1 = new ASTBool(false);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      t1 = boolAdd();
      jj_consume_token(RPAR);
      break;
    case NOT:
      jj_consume_token(NOT);
      t1 = boolAdd();
                               t1 = new ASTNot(t1);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      t1 = Fact();
                            t1 = new ASTUMinus(t1);
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      label_6:
      while (true) {
        jj_consume_token(LET);
        n = jj_consume_token(Id);
        jj_consume_token(EQUALS);
        t1 = boolAdd();
        jj_consume_token(SEMICOLON);
                                                                        variables.add(new Bind(n.image, t1));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LET:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
      }
      t2 = S();
      jj_consume_token(RBRACKET);
          t1 = new ASTDef(variables, t2);
      break;
    case NEW:
      jj_consume_token(NEW);
      t1 = boolAdd();
                              t1 = new ASTNew(t1);
      break;
    case DEREF:
      jj_consume_token(DEREF);
      t1 = Fact();
                             t1 = new ASTDeref(t1);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x40000000,0x1000,0x800,0x3e000,0x3e000,0xc0000,0xc0000,0x300000,0x300000,0x10,0x904807e0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
