PARSER_BEGIN(Parser)

import java.util.*;

/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
        try {
        exp = parser.Start();
        System.out.println( exp.eval(new Environment(null)) );
        } catch (Exception e) {
          System.out.println ("Syntax Error!");
          parser.ReInit(System.in);
        }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < LET: "let">
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < NOT: "~" >
  |
  < AND: "&&" >
  |
  < OR: "||" >
  |
  < EQUALTO: "==">
  |
  < GREATERTHAN: ">" >
  |
  < GREATEREQTHAN: ">=" >
  |
  < LESSTHAN: "<" >
  |
  < LESSEQTHAN: "<=" >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(">
  |
  < RPAR : ")">
  |
  < EL: "\n">
  |
  < EQUALS: "=">
  |
  < SEMICOLON: ";">
  |
  < LBRACKET: "{">
  |
  < RBRACKET: "}">
}

ASTNode Start():
{ ASTNode t; }
{
   t = Exp() <EL>
   { return t; }
}

ASTNode boolExp():
{
    ASTNode t1, t2;
    Token op;
}
{
    t1 = Exp()
    (
    ( op = <EQUALTO> | op = <GREATERTHAN> | op = <GREATEREQTHAN> | op = <LESSTHAN> | op = <LESSEQTHAN> )
    t2 = Exp()
    { t1 = new ASTCompare(t1, t2, op.image); }
    )?
    { return t1; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS>) t2=Term() 
                 { if (op.kind == PLUS) 
                    t1 = new ASTPlus(t1,t2);
                   else {
                    t1 = new ASTSub(t1,t2);}  
                 } 
               )*
     { return t1; } 
}

ASTNode Term() :
{
  Token op;
  ASTNode t1, t2;
}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Term()
 		 {
      if (op.kind == TIMES)
        t1= new ASTMult(t1,t2);
      else
        t1 = new ASTDiv(t1,t2);
                 } 
		)?
     { return t1; } 
}


ASTNode Fact() :
{ 
  Token n; 
  ASTNode t1, t2;
  List<Bind> variables = new ArrayList<Bind>();
}
{
   (
      n=<Num> 
      { 
        t1 = new ASTNum(Integer.parseInt(n.image)); 
      } 
      | <LPAR> 
          t1=Exp() 
        <RPAR> 
      | <MINUS> 
        t1=Fact() 
        {
          t1 = new ASTUMinus(t1);
        }
      | <LBRACKET> 
        (<LET> n = <Id> <EQUALS> t1 = Exp() <SEMICOLON> {variables.add(new Bind(n.image, t1));})+
        t2 = Exp() 
        <RBRACKET>
        <SEMICOLON>
        <SEMICOLON>
        {
          t1 = new ASTDef(variables, t2);
        }
      |
        n = <Id> { t1 = new ASTId(n.image);}
    )
   { return t1; }
}





















