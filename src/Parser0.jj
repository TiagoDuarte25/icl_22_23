PARSER_BEGIN(Parser)

import java.util.*;

/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
        try {
        exp = parser.Start();
        System.out.println( exp.eval(new Environment(null)) );
        } catch (Exception e) {
          System.out.println ("Syntax Error!");
          parser.ReInit(System.in);
        }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < LET: "let">
  |
  < Num: (["0"-"9"]) + >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < NEW: "new">
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < NOT: "~" >
  |
  < AND: "&&" >
  |
  < OR: "||" >
  |
  < EQUALTO: "==">
  |
  < GREATERTHAN: ">" >
  |
  < GREATEREQTHAN: ">=" >
  |
  < LESSTHAN: "<" >
  |
  < LESSEQTHAN: "<=" >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(">
  |
  < RPAR : ")">
  |
  < EL: "\n">
  |
  < EQUALS: "=">
  |
  < SEMICOLON: ";">
  |
  < END: ";;" >
  |
  < LBRACKET: "{">
  |
  < RBRACKET: "}">
  |
  < ASSIGN: ":=">
  |
  < DEREF: "!">
}

ASTNode Start():
{ ASTNode t; }
{
   t = S() <END><EL>
   { return t; }
}

ASTNode S():
{
    ASTNode t1, t2;
}
{
    t1 = SE() ( <SEMICOLON> t2 = SE() { t1 = new ASTSeq(t1, t2); } )*
    { return t1; }
}

ASTNode SE():
{
    ASTNode t1, t2;
}
{
    t1 = boolAdd() ( <ASSIGN> t2 = boolAdd() { t1 = new ASTAssign(t1, t2); } )*

    { return t1; }
}

ASTNode boolAdd():
{ ASTNode t1, t2; }
{
    t1 = boolMult()
    ( <OR> t2 = boolMult() { t1 = new ASTOr(t1, t2); } )*
    { return t1; }
}

ASTNode boolMult():
{ ASTNode t1, t2; }
{
    t1 = relops()
    ( <AND> t2 = relops() { t1 = new ASTAnd(t1, t2); } )*
    { return t1; }
}

ASTNode relops():
{
    ASTNode t1, t2;
    Token op;
}
{
    t1 = Exp()
    (
        ( op = <EQUALTO> | op = <GREATERTHAN> | op = <GREATEREQTHAN> | op = <LESSTHAN> | op = <LESSEQTHAN> )
        t2 = Exp()
        { t1 = new ASTCompare(t1, t2, op.image); }
    )?
    { return t1; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS>) t2=Term()
                 {
                   if (op.kind == PLUS)
                    t1 = new ASTPlus(t1,t2);
                   else {
                    t1 = new ASTSub(t1,t2);}
                 }
               )*
     { return t1; } 
}

ASTNode Term() :
{
  Token op;
  ASTNode t1, t2;
}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Term()
 		 {
      if (op.kind == TIMES)
        t1= new ASTMult(t1,t2);
      else
        t1 = new ASTDiv(t1,t2);
                 } 
		)?
     { return t1; } 
}


ASTNode Fact() :
{ 
  Token n; 
  ASTNode t1, t2;
  List<Bind> variables = new ArrayList<Bind>();
}
{
   (
      n=<Num> { t1 = new ASTNum(Integer.parseInt(n.image)); }
      | n = <Id> { t1 = new ASTId(n.image);}
      | <TRUE> { t1 = new ASTBool(true); }
      | <FALSE> { t1 = new ASTBool(false); }
      | <LPAR> t1 = boolAdd() <RPAR>
      | <NOT> t1 = boolAdd() { t1 = new ASTNot(t1); }
      | <MINUS> t1=Fact() { t1 = new ASTUMinus(t1); }
      | <LBRACKET> (<LET> n = <Id> <EQUALS> t1 = SE() <SEMICOLON> {variables.add(new Bind(n.image, t1));})+ t2 = S() <RBRACKET>
        { t1 = new ASTDef(variables, t2); }
      | <NEW> t1 = Fact() {t1 = new ASTNew(t1);}
      | <DEREF> t1 = Fact() {t1 = new ASTDeref(t1);}
    )
   { return t1; }
}





















